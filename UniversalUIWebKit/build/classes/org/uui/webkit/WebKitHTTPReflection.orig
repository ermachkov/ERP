package org.uui.webkit;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;


public class WebKitHTTPReflection {

    private static WebKitHTTPReflection self = null;
    private int port = 1572;
    private boolean hasMore = true;

    public static void startSocket(int port) {
        if (self == null) {
            self = new WebKitHTTPReflection();
            self.hasMore = true;
            self.port = port;
            Executors.newSingleThreadExecutor().execute(self.runServer());
        }
    }

    public static void stopServer() {
        if (self != null) {
            self.hasMore = false;
        }
    }

    private Runnable runServer() {
        Runnable r = new Runnable() {

            @Override
            public void run() {
                try {
                    ServerSocket serverSocket = new ServerSocket(port);
                    System.out.println("WebKitServerSocket running on port "
                            + serverSocket.getLocalPort());

                    // server infinite loop
                    while (hasMore) {
                        Socket socket = serverSocket.accept();
                        System.out.println("New connection accepted "
                                + socket.getInetAddress() + ":" + socket.getPort());

                        // Construct handler to process the HTTP request message.
                        try {
                            HttpRequestHandlerReflect request = new HttpRequestHandlerReflect(socket);
                            // Create a new thread to process the request.
                            Thread thread = new Thread(request);

                            // Start the thread.
                            thread.start();
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                } catch (IOException e) {
                    System.out.println(e);
                }
            }
        };

        return r;
    }
}
final class HttpRequestHandlerReflect implements Runnable {
    
    final static String CRLF = "\r\n";
    private Socket socket;
    private InputStream input;
    private OutputStream output;
    private BufferedReader br;

    public HttpRequestHandlerReflect(Socket socket) throws Exception {
        this.socket = socket;
        this.input = socket.getInputStream();
        this.output = socket.getOutputStream();
        this.br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    }

    @Override
    public void run() {
        try {
            processRequest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void processRequest() {
        try {
            while (true) {
                String headerLine = br.readLine();
                System.out.println("Header: " + URLDecoder.decode(headerLine, "utf-8"));
                if (headerLine.equals(CRLF) || headerLine.equals("")) {
                    break;
                }

                StringTokenizer s = new StringTokenizer(headerLine);
                String temp = s.nextToken();

                if (temp.equals("GET")) {
                    String fileName = s.nextToken();
                    boolean isError = false;
                    String arr[] = fileName.split("\\?");
                    Object[] result = null;

                    if (arr.length > 1) {
                        String sArr[] = arr[1].split("&");
                        if (sArr.length >= 2) {
                            ArrayList<String> list = new ArrayList<>();
                            list.add(sArr[0].split("=")[1]);
                            list.add(sArr[1].split("=")[1]);

                            if (sArr.length == 2) {
                                list.add("null");
                                
                            } else {
                                for (int i = 2; i < sArr.length; i++) {
                                    String v = URLDecoder.decode(sArr[i].split("=")[1], "utf-8");
                                    if (v.equals("null")) {
                                        list.add(null);
                                    } else {
                                        list.add(v);
                                    }
                                }
                            }

                            // EXECUTE
                            Object[] array = new Object[3];
                            array[0] = list.get(0);
                            array[1] = list.get(1);

                            if (list.get(2).equals("null")) {
                                array[2] = null;

                            } else {
                                Object[] paramArray = new Object[list.size() - 2];
                                System.arraycopy(list.toArray(new String[list.size()]), 2, paramArray, 0, paramArray.length);
                                array[2] = paramArray;
                            }

                            result = WebKitExecutor.getInstance().execute(array);
                            if (result.length == 0) {
                                isError = true;
                            }

                        } else {
                            isError = true;
                        }
                    } else {
                        isError = true;
                    }

                    String serverLine = "Server: WebKitHttpServer";
                    String statusLine = null;
                    String contentTypeLine = null;
                    String entityBody = null;
                    String contentLengthLine = "error";
                    if (!isError) {
                        statusLine = "HTTP/1.0 200 OK" + CRLF;
                        contentTypeLine = "Content-type: text/html" + CRLF;
                        contentLengthLine = "Content-Length: " + ("" + result[0]).getBytes().length + CRLF;
                    } else {
                        statusLine = "HTTP/1.0 404 Not Found" + CRLF;
                        contentTypeLine = "text/html";
                        entityBody = "<HTML>"
                                + "<HEAD><TITLE>404 Not Found</TITLE></HEAD>"
                                + "<BODY>" + fileName + "<br/>404 Not Found"
                                + "</BODY></HTML>";
                        contentLengthLine = "Content-Length: "
                                + entityBody.length() + CRLF;
                    }

                    // Send the status line.
                    output.write(statusLine.getBytes());
                    System.out.println(statusLine);

                    // Send the server line.
                    output.write(serverLine.getBytes());
                    System.out.println(serverLine);

                    // Send the content type line.
                    output.write(contentTypeLine.getBytes());
                    System.out.println(contentTypeLine);

                    // Send the Content-Length
                    output.write(contentLengthLine.getBytes());
                    System.out.println(contentLengthLine);

                    // Send a blank line to indicate the end of the header lines.
                    output.write(CRLF.getBytes());
                    System.out.println(CRLF);

                    // Send the entity body.
                    if (!isError) {
                        output.write(("" + result[0]).getBytes());

                    } else {
                        output.write(entityBody.getBytes());
                    }
                }
            }

            output.close();
            br.close();
            socket.close();

        } catch (Exception e) {
            try {
                if (output != null) {
                    output.close();
                }

                if (br != null) {
                    br.close();
                }

                if (socket != null) {
                    socket.close();
                }
            } catch (Exception ex) {
            }

            Logger.getGlobal().log(Level.SEVERE, null, e);
        }
    }
}